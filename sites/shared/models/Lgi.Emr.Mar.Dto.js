// This file was generated by the EMAR Backend-DTO-to-Javascript-Object tool
// and should never be modified manually, except for debugging purposes.
//
// Generation timestamp: 2015-12-02 @ 08h57
// From DTO Assembly:    Lgi.Emr.Mar.Dto, version: 1.5.0.10


var Lgi = Lgi || {};
Lgi.Emr = Lgi.Emr || {};
Lgi.Emr.Mar = Lgi.Emr.Mar || {};
Lgi.Emr.Mar.Dto = Lgi.Emr.Mar.Dto || {};
Lgi.Emr.Mar.Dto.Advisor = Lgi.Emr.Mar.Dto.Advisor || {};
(function(ns) {
	ns.administeredDoseDto = function(options) {
		var _options = {
			prescribedDose: new Lgi.Emr.Mar.Dto.doseDto(),
			dispensedDose: null,
			strengthUnitId: null,
			dispensedAmount: null,
			amountUnitId: null,
			rate: null,
			rateUnitId: null,
			administeredVolume: null,
			volumeUnitId: null,
			isRateAdaptation: false,
			isBolus: false,
			isInWaitingState: false,
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'prescribedDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.prescribedDose; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.prescribedDose = new Lgi.Emr.Mar.Dto.doseDto(value);
				else
					_options.prescribedDose = null; }
		});
		Object.defineProperty(this, 'dispensedDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dispensedDose; },
			set: function(value) { _options.dispensedDose = value; }
		});
		Object.defineProperty(this, 'strengthUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.strengthUnitId; },
			set: function(value) { _options.strengthUnitId = value; }
		});
		Object.defineProperty(this, 'dispensedAmount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dispensedAmount; },
			set: function(value) { _options.dispensedAmount = value; }
		});
		Object.defineProperty(this, 'amountUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.amountUnitId; },
			set: function(value) { _options.amountUnitId = value; }
		});
		Object.defineProperty(this, 'rate', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rate; },
			set: function(value) { _options.rate = value; }
		});
		Object.defineProperty(this, 'rateUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rateUnitId; },
			set: function(value) { _options.rateUnitId = value; }
		});
		Object.defineProperty(this, 'administeredVolume', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administeredVolume; },
			set: function(value) { _options.administeredVolume = value; }
		});
		Object.defineProperty(this, 'volumeUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.volumeUnitId; },
			set: function(value) { _options.volumeUnitId = value; }
		});
		Object.defineProperty(this, 'isRateAdaptation', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isRateAdaptation; },
			set: function(value) { _options.isRateAdaptation = value; }
		});
		Object.defineProperty(this, 'isBolus', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isBolus; },
			set: function(value) { _options.isBolus = value; }
		});
		Object.defineProperty(this, 'isInWaitingState', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isInWaitingState; },
			set: function(value) { _options.isInWaitingState = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.AdministeredDoseNotificationDto = function(options) {
		var _options = {
			prescribedDose: new Lgi.Emr.Mar.Dto.doseDto(),
			dispensedDose: null,
			strengthUnitId: null,
			dispensedAmount: null,
			amountUnitId: null,
			rate: null,
			rateUnitId: null,
			administeredVolume: null,
			volumeUnitId: null,
			isRateAdaptation: false,
			isBolus: false,
			isInWaitingState: false,
			version: 0,
			id: 0,
			strengthUnitCode: "",
			strengthUnitDescription: "",
			amountUnitCode: "",
			amountUnitDescription: "",
			rateUnitCode: "",
			rateUnitDescription: "",
			volumeUnitCode: "",
			volumeUnitDescription: ""
		}
		Object.defineProperty(this, 'prescribedDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.prescribedDose; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.prescribedDose = new Lgi.Emr.Mar.Dto.doseDto(value);
				else
					_options.prescribedDose = null; }
		});
		Object.defineProperty(this, 'dispensedDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dispensedDose; },
			set: function(value) { _options.dispensedDose = value; }
		});
		Object.defineProperty(this, 'strengthUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.strengthUnitId; },
			set: function(value) { _options.strengthUnitId = value; }
		});
		Object.defineProperty(this, 'dispensedAmount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dispensedAmount; },
			set: function(value) { _options.dispensedAmount = value; }
		});
		Object.defineProperty(this, 'amountUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.amountUnitId; },
			set: function(value) { _options.amountUnitId = value; }
		});
		Object.defineProperty(this, 'rate', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rate; },
			set: function(value) { _options.rate = value; }
		});
		Object.defineProperty(this, 'rateUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rateUnitId; },
			set: function(value) { _options.rateUnitId = value; }
		});
		Object.defineProperty(this, 'administeredVolume', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administeredVolume; },
			set: function(value) { _options.administeredVolume = value; }
		});
		Object.defineProperty(this, 'volumeUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.volumeUnitId; },
			set: function(value) { _options.volumeUnitId = value; }
		});
		Object.defineProperty(this, 'isRateAdaptation', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isRateAdaptation; },
			set: function(value) { _options.isRateAdaptation = value; }
		});
		Object.defineProperty(this, 'isBolus', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isBolus; },
			set: function(value) { _options.isBolus = value; }
		});
		Object.defineProperty(this, 'isInWaitingState', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isInWaitingState; },
			set: function(value) { _options.isInWaitingState = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		Object.defineProperty(this, 'strengthUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.strengthUnitCode; },
			set: function(value) { _options.strengthUnitCode = value; }
		});
		Object.defineProperty(this, 'strengthUnitDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.strengthUnitDescription; },
			set: function(value) { _options.strengthUnitDescription = value; }
		});
		Object.defineProperty(this, 'amountUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.amountUnitCode; },
			set: function(value) { _options.amountUnitCode = value; }
		});
		Object.defineProperty(this, 'amountUnitDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.amountUnitDescription; },
			set: function(value) { _options.amountUnitDescription = value; }
		});
		Object.defineProperty(this, 'rateUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rateUnitCode; },
			set: function(value) { _options.rateUnitCode = value; }
		});
		Object.defineProperty(this, 'rateUnitDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rateUnitDescription; },
			set: function(value) { _options.rateUnitDescription = value; }
		});
		Object.defineProperty(this, 'volumeUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.volumeUnitCode; },
			set: function(value) { _options.volumeUnitCode = value; }
		});
		Object.defineProperty(this, 'volumeUnitDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.volumeUnitDescription; },
			set: function(value) { _options.volumeUnitDescription = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.administrationNotificationDataDto = function(options) {
		var _options = {
			callContext: new Lgi.Infrastructure.EnterpriseServices.Dto.callContextDto(),
			operation: null,
			administrationInstance: new Lgi.Emr.Mar.Dto.AdministrationInstanceNotificationDto(),
			rx: new Lgi.Emr.Mar.Dto.RxNotificationDto()
		}
		Object.defineProperty(this, 'callContext', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.callContext; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.callContext = new Lgi.Infrastructure.EnterpriseServices.Dto.callContextDto(value);
				else
					_options.callContext = null; }
		});
		Object.defineProperty(this, 'operation', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.operation; },
			set: function(value) { _options.operation = value; }
		});
		Object.defineProperty(this, 'administrationInstance', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationInstance; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.administrationInstance = new Lgi.Emr.Mar.Dto.AdministrationInstanceNotificationDto(value);
				else
					_options.administrationInstance = null; }
		});
		Object.defineProperty(this, 'rx', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rx; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.rx = new Lgi.Emr.Mar.Dto.RxNotificationDto(value);
				else
					_options.rx = null; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.administrationInstanceDto = function(options) {
		var _options = {
			administrationStatusId: null,
			siteId: null,
			routeId: null,
			cancellationReasonId: null,
			cancellationNote: "",
			administrationReasonId: null,
			nonAdministrationReasonId: null,
			reasonPrecisions: "",
			infusionSiteId: null,
			plannedDateTime: null,
			nextActivityDateTime: null,
			realizationDateTime: null,
			isPreparationValidated: false,
			preparationDateTime: null,
			administrationNotes: "",
			administrationUser: new Lgi.Emr.Mar.Dto.userDto(),
			responseToMedication: "",
			externalId: "",
			batchNumber: "",
			expirationDateTime: null,
			isSuspended: false,
			isAdditionalDose: false,
			isBatchAdministrationAllowed: false,
			isRemoval: false,
			isBagReplacement: false,
			mustBeSigned: false,
			duration: null,
			durationUnitId: null,
			parentRxId: null,
			applicationSite: "",
			administeredDose: new Lgi.Emr.Mar.Dto.administeredDoseDto(),
			observations: [],
			workflowInstances: [],
			signature: new Lgi.Emr.Mar.Dto.signatureDto(),
			schedule: new Lgi.Emr.Mar.Dto.scheduleDto(),
			verifiedBy: new Lgi.Emr.Mar.Dto.userDto(),
			verificationDateTime: null,
			sequenceNumber: 0,
			preparedBy: new Lgi.Emr.Mar.Dto.userDto(),
			prepareDoubleCheckDateTime: null,
			preparationCancellationReasonId: null,
			preparationCancellationNote: "",
			modifiedOn: null,
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'administrationStatusId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationStatusId; },
			set: function(value) { _options.administrationStatusId = value; }
		});
		Object.defineProperty(this, 'siteId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.siteId; },
			set: function(value) { _options.siteId = value; }
		});
		Object.defineProperty(this, 'routeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.routeId; },
			set: function(value) { _options.routeId = value; }
		});
		Object.defineProperty(this, 'cancellationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cancellationReasonId; },
			set: function(value) { _options.cancellationReasonId = value; }
		});
		Object.defineProperty(this, 'cancellationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cancellationNote; },
			set: function(value) { _options.cancellationNote = value; }
		});
		Object.defineProperty(this, 'administrationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationReasonId; },
			set: function(value) { _options.administrationReasonId = value; }
		});
		Object.defineProperty(this, 'nonAdministrationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.nonAdministrationReasonId; },
			set: function(value) { _options.nonAdministrationReasonId = value; }
		});
		Object.defineProperty(this, 'reasonPrecisions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.reasonPrecisions; },
			set: function(value) { _options.reasonPrecisions = value; }
		});
		Object.defineProperty(this, 'infusionSiteId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.infusionSiteId; },
			set: function(value) { _options.infusionSiteId = value; }
		});
		Object.defineProperty(this, 'plannedDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.plannedDateTime; },
			set: function(value) { _options.plannedDateTime = value; }
		});
		Object.defineProperty(this, 'nextActivityDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.nextActivityDateTime; },
			set: function(value) { _options.nextActivityDateTime = value; }
		});
		Object.defineProperty(this, 'realizationDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.realizationDateTime; },
			set: function(value) { _options.realizationDateTime = value; }
		});
		Object.defineProperty(this, 'isPreparationValidated', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isPreparationValidated; },
			set: function(value) { _options.isPreparationValidated = value; }
		});
		Object.defineProperty(this, 'preparationDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.preparationDateTime; },
			set: function(value) { _options.preparationDateTime = value; }
		});
		Object.defineProperty(this, 'administrationNotes', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationNotes; },
			set: function(value) { _options.administrationNotes = value; }
		});
		Object.defineProperty(this, 'administrationUser', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationUser; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.administrationUser = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.administrationUser = null; }
		});
		Object.defineProperty(this, 'responseToMedication', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.responseToMedication; },
			set: function(value) { _options.responseToMedication = value; }
		});
		Object.defineProperty(this, 'externalId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.externalId; },
			set: function(value) { _options.externalId = value; }
		});
		Object.defineProperty(this, 'batchNumber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.batchNumber; },
			set: function(value) { _options.batchNumber = value; }
		});
		Object.defineProperty(this, 'expirationDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.expirationDateTime; },
			set: function(value) { _options.expirationDateTime = value; }
		});
		Object.defineProperty(this, 'isSuspended', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isSuspended; },
			set: function(value) { _options.isSuspended = value; }
		});
		Object.defineProperty(this, 'isAdditionalDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isAdditionalDose; },
			set: function(value) { _options.isAdditionalDose = value; }
		});
		Object.defineProperty(this, 'isBatchAdministrationAllowed', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isBatchAdministrationAllowed; },
			set: function(value) { _options.isBatchAdministrationAllowed = value; }
		});
		Object.defineProperty(this, 'isRemoval', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isRemoval; },
			set: function(value) { _options.isRemoval = value; }
		});
		Object.defineProperty(this, 'isBagReplacement', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isBagReplacement; },
			set: function(value) { _options.isBagReplacement = value; }
		});
		Object.defineProperty(this, 'mustBeSigned', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mustBeSigned; },
			set: function(value) { _options.mustBeSigned = value; }
		});
		Object.defineProperty(this, 'duration', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.duration; },
			set: function(value) { _options.duration = value; }
		});
		Object.defineProperty(this, 'durationUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.durationUnitId; },
			set: function(value) { _options.durationUnitId = value; }
		});
		Object.defineProperty(this, 'parentRxId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.parentRxId; },
			set: function(value) { _options.parentRxId = value; }
		});
		Object.defineProperty(this, 'applicationSite', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.applicationSite; },
			set: function(value) { _options.applicationSite = value; }
		});
		Object.defineProperty(this, 'administeredDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administeredDose; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.administeredDose = new Lgi.Emr.Mar.Dto.administeredDoseDto(value);
				else
					_options.administeredDose = null; }
		});
		Object.defineProperty(this, 'observations', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.observations; },
			set: function(value) { _options.observations = value; }
		});
		Object.defineProperty(this, 'workflowInstances', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.workflowInstances; },
			set: function(value) { _options.workflowInstances = value; }
		});
		Object.defineProperty(this, 'signature', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.signature; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.signature = new Lgi.Emr.Mar.Dto.signatureDto(value);
				else
					_options.signature = null; }
		});
		Object.defineProperty(this, 'schedule', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.schedule; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.schedule = new Lgi.Emr.Mar.Dto.scheduleDto(value);
				else
					_options.schedule = null; }
		});
		Object.defineProperty(this, 'verifiedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.verifiedBy; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.verifiedBy = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.verifiedBy = null; }
		});
		Object.defineProperty(this, 'verificationDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.verificationDateTime; },
			set: function(value) { _options.verificationDateTime = value; }
		});
		Object.defineProperty(this, 'sequenceNumber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sequenceNumber; },
			set: function(value) { _options.sequenceNumber = value; }
		});
		Object.defineProperty(this, 'preparedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.preparedBy; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.preparedBy = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.preparedBy = null; }
		});
		Object.defineProperty(this, 'prepareDoubleCheckDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.prepareDoubleCheckDateTime; },
			set: function(value) { _options.prepareDoubleCheckDateTime = value; }
		});
		Object.defineProperty(this, 'preparationCancellationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.preparationCancellationReasonId; },
			set: function(value) { _options.preparationCancellationReasonId = value; }
		});
		Object.defineProperty(this, 'preparationCancellationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.preparationCancellationNote; },
			set: function(value) { _options.preparationCancellationNote = value; }
		});
		Object.defineProperty(this, 'modifiedOn', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.modifiedOn; },
			set: function(value) { _options.modifiedOn = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.AdministrationInstanceNotificationDto = function(options) {
		var _options = {
			administrationStatusId: null,
			siteId: null,
			routeId: null,
			cancellationReasonId: null,
			cancellationNote: "",
			administrationReasonId: null,
			nonAdministrationReasonId: null,
			reasonPrecisions: "",
			infusionSiteId: null,
			plannedDateTime: null,
			nextActivityDateTime: null,
			realizationDateTime: null,
			isPreparationValidated: false,
			preparationDateTime: null,
			administrationNotes: "",
			administrationUser: new Lgi.Emr.Mar.Dto.userDto(),
			responseToMedication: "",
			externalId: "",
			batchNumber: "",
			expirationDateTime: null,
			isSuspended: false,
			isAdditionalDose: false,
			isBatchAdministrationAllowed: false,
			isRemoval: false,
			isBagReplacement: false,
			mustBeSigned: false,
			duration: null,
			durationUnitId: null,
			parentRxId: null,
			applicationSite: "",
			administeredDose: new Lgi.Emr.Mar.Dto.administeredDoseDto(),
			observations: [],
			workflowInstances: [],
			signature: new Lgi.Emr.Mar.Dto.signatureDto(),
			schedule: new Lgi.Emr.Mar.Dto.scheduleDto(),
			verifiedBy: new Lgi.Emr.Mar.Dto.userDto(),
			verificationDateTime: null,
			sequenceNumber: 0,
			preparedBy: new Lgi.Emr.Mar.Dto.userDto(),
			prepareDoubleCheckDateTime: null,
			preparationCancellationReasonId: null,
			preparationCancellationNote: "",
			modifiedOn: null,
			version: 0,
			id: 0,
			administrationStatusCode: "",
			administrationStatusDescription: "",
			siteCode: "",
			siteDescription: "",
			routeCode: "",
			routeDescription: "",
			infusionSiteCode: "",
			infusionSiteDescription: "",
			durationUnitCode: "",
			durationUnitDescription: ""
		}
		Object.defineProperty(this, 'administrationStatusId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationStatusId; },
			set: function(value) { _options.administrationStatusId = value; }
		});
		Object.defineProperty(this, 'siteId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.siteId; },
			set: function(value) { _options.siteId = value; }
		});
		Object.defineProperty(this, 'routeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.routeId; },
			set: function(value) { _options.routeId = value; }
		});
		Object.defineProperty(this, 'cancellationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cancellationReasonId; },
			set: function(value) { _options.cancellationReasonId = value; }
		});
		Object.defineProperty(this, 'cancellationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cancellationNote; },
			set: function(value) { _options.cancellationNote = value; }
		});
		Object.defineProperty(this, 'administrationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationReasonId; },
			set: function(value) { _options.administrationReasonId = value; }
		});
		Object.defineProperty(this, 'nonAdministrationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.nonAdministrationReasonId; },
			set: function(value) { _options.nonAdministrationReasonId = value; }
		});
		Object.defineProperty(this, 'reasonPrecisions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.reasonPrecisions; },
			set: function(value) { _options.reasonPrecisions = value; }
		});
		Object.defineProperty(this, 'infusionSiteId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.infusionSiteId; },
			set: function(value) { _options.infusionSiteId = value; }
		});
		Object.defineProperty(this, 'plannedDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.plannedDateTime; },
			set: function(value) { _options.plannedDateTime = value; }
		});
		Object.defineProperty(this, 'nextActivityDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.nextActivityDateTime; },
			set: function(value) { _options.nextActivityDateTime = value; }
		});
		Object.defineProperty(this, 'realizationDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.realizationDateTime; },
			set: function(value) { _options.realizationDateTime = value; }
		});
		Object.defineProperty(this, 'isPreparationValidated', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isPreparationValidated; },
			set: function(value) { _options.isPreparationValidated = value; }
		});
		Object.defineProperty(this, 'preparationDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.preparationDateTime; },
			set: function(value) { _options.preparationDateTime = value; }
		});
		Object.defineProperty(this, 'administrationNotes', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationNotes; },
			set: function(value) { _options.administrationNotes = value; }
		});
		Object.defineProperty(this, 'administrationUser', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationUser; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.administrationUser = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.administrationUser = null; }
		});
		Object.defineProperty(this, 'responseToMedication', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.responseToMedication; },
			set: function(value) { _options.responseToMedication = value; }
		});
		Object.defineProperty(this, 'externalId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.externalId; },
			set: function(value) { _options.externalId = value; }
		});
		Object.defineProperty(this, 'batchNumber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.batchNumber; },
			set: function(value) { _options.batchNumber = value; }
		});
		Object.defineProperty(this, 'expirationDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.expirationDateTime; },
			set: function(value) { _options.expirationDateTime = value; }
		});
		Object.defineProperty(this, 'isSuspended', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isSuspended; },
			set: function(value) { _options.isSuspended = value; }
		});
		Object.defineProperty(this, 'isAdditionalDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isAdditionalDose; },
			set: function(value) { _options.isAdditionalDose = value; }
		});
		Object.defineProperty(this, 'isBatchAdministrationAllowed', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isBatchAdministrationAllowed; },
			set: function(value) { _options.isBatchAdministrationAllowed = value; }
		});
		Object.defineProperty(this, 'isRemoval', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isRemoval; },
			set: function(value) { _options.isRemoval = value; }
		});
		Object.defineProperty(this, 'isBagReplacement', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isBagReplacement; },
			set: function(value) { _options.isBagReplacement = value; }
		});
		Object.defineProperty(this, 'mustBeSigned', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mustBeSigned; },
			set: function(value) { _options.mustBeSigned = value; }
		});
		Object.defineProperty(this, 'duration', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.duration; },
			set: function(value) { _options.duration = value; }
		});
		Object.defineProperty(this, 'durationUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.durationUnitId; },
			set: function(value) { _options.durationUnitId = value; }
		});
		Object.defineProperty(this, 'parentRxId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.parentRxId; },
			set: function(value) { _options.parentRxId = value; }
		});
		Object.defineProperty(this, 'applicationSite', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.applicationSite; },
			set: function(value) { _options.applicationSite = value; }
		});
		Object.defineProperty(this, 'administeredDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administeredDose; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.administeredDose = new Lgi.Emr.Mar.Dto.administeredDoseDto(value);
				else
					_options.administeredDose = null; }
		});
		Object.defineProperty(this, 'observations', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.observations; },
			set: function(value) { _options.observations = value; }
		});
		Object.defineProperty(this, 'workflowInstances', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.workflowInstances; },
			set: function(value) { _options.workflowInstances = value; }
		});
		Object.defineProperty(this, 'signature', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.signature; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.signature = new Lgi.Emr.Mar.Dto.signatureDto(value);
				else
					_options.signature = null; }
		});
		Object.defineProperty(this, 'schedule', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.schedule; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.schedule = new Lgi.Emr.Mar.Dto.scheduleDto(value);
				else
					_options.schedule = null; }
		});
		Object.defineProperty(this, 'verifiedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.verifiedBy; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.verifiedBy = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.verifiedBy = null; }
		});
		Object.defineProperty(this, 'verificationDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.verificationDateTime; },
			set: function(value) { _options.verificationDateTime = value; }
		});
		Object.defineProperty(this, 'sequenceNumber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sequenceNumber; },
			set: function(value) { _options.sequenceNumber = value; }
		});
		Object.defineProperty(this, 'preparedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.preparedBy; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.preparedBy = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.preparedBy = null; }
		});
		Object.defineProperty(this, 'prepareDoubleCheckDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.prepareDoubleCheckDateTime; },
			set: function(value) { _options.prepareDoubleCheckDateTime = value; }
		});
		Object.defineProperty(this, 'preparationCancellationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.preparationCancellationReasonId; },
			set: function(value) { _options.preparationCancellationReasonId = value; }
		});
		Object.defineProperty(this, 'preparationCancellationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.preparationCancellationNote; },
			set: function(value) { _options.preparationCancellationNote = value; }
		});
		Object.defineProperty(this, 'modifiedOn', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.modifiedOn; },
			set: function(value) { _options.modifiedOn = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		Object.defineProperty(this, 'administrationStatusCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationStatusCode; },
			set: function(value) { _options.administrationStatusCode = value; }
		});
		Object.defineProperty(this, 'administrationStatusDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationStatusDescription; },
			set: function(value) { _options.administrationStatusDescription = value; }
		});
		Object.defineProperty(this, 'siteCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.siteCode; },
			set: function(value) { _options.siteCode = value; }
		});
		Object.defineProperty(this, 'siteDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.siteDescription; },
			set: function(value) { _options.siteDescription = value; }
		});
		Object.defineProperty(this, 'routeCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.routeCode; },
			set: function(value) { _options.routeCode = value; }
		});
		Object.defineProperty(this, 'routeDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.routeDescription; },
			set: function(value) { _options.routeDescription = value; }
		});
		Object.defineProperty(this, 'infusionSiteCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.infusionSiteCode; },
			set: function(value) { _options.infusionSiteCode = value; }
		});
		Object.defineProperty(this, 'infusionSiteDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.infusionSiteDescription; },
			set: function(value) { _options.infusionSiteDescription = value; }
		});
		Object.defineProperty(this, 'durationUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.durationUnitCode; },
			set: function(value) { _options.durationUnitCode = value; }
		});
		Object.defineProperty(this, 'durationUnitDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.durationUnitDescription; },
			set: function(value) { _options.durationUnitDescription = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.administrationTimeDto = function(options) {
		var _options = {
			time: 0,
			description: "",
			isAdministration: false,
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'time', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.time; },
			set: function(value) { _options.time = value; }
		});
		Object.defineProperty(this, 'description', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.description; },
			set: function(value) { _options.description = value; }
		});
		Object.defineProperty(this, 'isAdministration', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isAdministration; },
			set: function(value) { _options.isAdministration = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.AvailableForInputLookup = function(options) {
		var _options = {
			isAvailableForInput: false,
			code: "",
			description: "",
			descriptionSL: "",
			shortDescription: "",
			shortDescriptionSL: "",
			isActive: false,
			isDefault: false,
			id: 0
		}
		Object.defineProperty(this, 'isAvailableForInput', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isAvailableForInput; },
			set: function(value) { _options.isAvailableForInput = value; }
		});
		Object.defineProperty(this, 'code', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.code; },
			set: function(value) { _options.code = value; }
		});
		Object.defineProperty(this, 'description', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.description; },
			set: function(value) { _options.description = value; }
		});
		Object.defineProperty(this, 'descriptionSL', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.descriptionSL; },
			set: function(value) { _options.descriptionSL = value; }
		});
		Object.defineProperty(this, 'shortDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.shortDescription; },
			set: function(value) { _options.shortDescription = value; }
		});
		Object.defineProperty(this, 'shortDescriptionSL', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.shortDescriptionSL; },
			set: function(value) { _options.shortDescriptionSL = value; }
		});
		Object.defineProperty(this, 'isActive', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isActive; },
			set: function(value) { _options.isActive = value; }
		});
		Object.defineProperty(this, 'isDefault', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isDefault; },
			set: function(value) { _options.isDefault = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.emarComponentVersionDto = function(options) {
		var _options = {
			componentName: "",
			version: ""
		}
		Object.defineProperty(this, 'componentName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.componentName; },
			set: function(value) { _options.componentName = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.emarVersionDto = function(options) {
		var _options = {
			version: "",
			releasedTimestamp: new Date(),
			componentVersions: []
		}
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'releasedTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.releasedTimestamp; },
			set: function(value) { _options.releasedTimestamp = value; }
		});
		Object.defineProperty(this, 'componentVersions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.componentVersions; },
			set: function(value) { _options.componentVersions = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.ErrorDto = function(options) {
		var _options = {
			timestamp: new Date(),
			severity: 0,
			source: 0,
			text: "",
			id: 0
		}
		Object.defineProperty(this, 'timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timestamp; },
			set: function(value) { _options.timestamp = value; }
		});
		Object.defineProperty(this, 'severity', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.severity; },
			set: function(value) { _options.severity = value; }
		});
		Object.defineProperty(this, 'source', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.source; },
			set: function(value) { _options.source = value; }
		});
		Object.defineProperty(this, 'text', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.text; },
			set: function(value) { _options.text = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.FlowsheetExtDto = function(options) {
		var _options = {
			patientId: "",
			serviceId: "",
			observations: []
		}
		Object.defineProperty(this, 'patientId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.patientId; },
			set: function(value) { _options.patientId = value; }
		});
		Object.defineProperty(this, 'serviceId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.serviceId; },
			set: function(value) { _options.serviceId = value; }
		});
		Object.defineProperty(this, 'observations', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.observations; },
			set: function(value) { _options.observations = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyDataMinutes = function(options) {
		var _options = {
			minuteFrequency: 0,
			numberOfDoses: 0
		}
		// This property is readonly and its value must not be changed
		// in any way, since it is defined at the backend side.
		Object.defineProperty(this, 'templateType', {
			enumerable: true,
			configurable: true,
			get: function() { return "Minutes"; }
		});
		Object.defineProperty(this, 'minuteFrequency', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.minuteFrequency; },
			set: function(value) { _options.minuteFrequency = value; }
		});
		Object.defineProperty(this, 'numberOfDoses', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.numberOfDoses; },
			set: function(value) { _options.numberOfDoses = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyDataListOfTimestamps = function(options) {
		var _options = {
			timestamps: [],
			numberOfDoses: 0
		}
		// This property is readonly and its value must not be changed
		// in any way, since it is defined at the backend side.
		Object.defineProperty(this, 'templateType', {
			enumerable: true,
			configurable: true,
			get: function() { return "ListOfTimestamps"; }
		});
		Object.defineProperty(this, 'timestamps', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timestamps; },
			set: function(value) { _options.timestamps = value; }
		});
		Object.defineProperty(this, 'numberOfDoses', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.numberOfDoses; },
			set: function(value) { _options.numberOfDoses = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.HL7CodedElementDto = function(options) {
		var _options = {
			identifier: "",
			text: "",
			codingSystem: ""
		}
		Object.defineProperty(this, 'identifier', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.identifier; },
			set: function(value) { _options.identifier = value; }
		});
		Object.defineProperty(this, 'text', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.text; },
			set: function(value) { _options.text = value; }
		});
		Object.defineProperty(this, 'codingSystem', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.codingSystem; },
			set: function(value) { _options.codingSystem = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.mdExtDto = function(options) {
		var _options = {
			licenceNumber: "",
			firstName: "",
			lastName: "",
			fullName: ""
		}
		Object.defineProperty(this, 'licenceNumber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.licenceNumber; },
			set: function(value) { _options.licenceNumber = value; }
		});
		Object.defineProperty(this, 'firstName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.firstName; },
			set: function(value) { _options.firstName = value; }
		});
		Object.defineProperty(this, 'lastName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.lastName; },
			set: function(value) { _options.lastName = value; }
		});
		Object.defineProperty(this, 'fullName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.fullName; },
			set: function(value) { _options.fullName = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.problemExtDto = function(options) {
		var _options = {
			name: "",
			code: "",
			source: "",
			comment: ""
		}
		Object.defineProperty(this, 'name', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.name; },
			set: function(value) { _options.name = value; }
		});
		Object.defineProperty(this, 'code', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.code; },
			set: function(value) { _options.code = value; }
		});
		Object.defineProperty(this, 'source', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.source; },
			set: function(value) { _options.source = value; }
		});
		Object.defineProperty(this, 'comment', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.comment; },
			set: function(value) { _options.comment = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.mdroExtDto = function(options) {
		var _options = {
			code: "",
			description: ""
		}
		Object.defineProperty(this, 'code', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.code; },
			set: function(value) { _options.code = value; }
		});
		Object.defineProperty(this, 'description', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.description; },
			set: function(value) { _options.description = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.allergyExtDto = function(options) {
		var _options = {
			code: "",
			description: ""
		}
		Object.defineProperty(this, 'code', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.code; },
			set: function(value) { _options.code = value; }
		});
		Object.defineProperty(this, 'description', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.description; },
			set: function(value) { _options.description = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyTemplateUsageDto = function(options) {
		var _options = {
			id: 0,
			timestamp: new Date(),
			isReferencedByAnySchedule: false,
			isModifiable: false,
			isDeletable: false
		}
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		Object.defineProperty(this, 'timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timestamp; },
			set: function(value) { _options.timestamp = value; }
		});
		Object.defineProperty(this, 'isReferencedByAnySchedule', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isReferencedByAnySchedule; },
			set: function(value) { _options.isReferencedByAnySchedule = value; }
		});
		Object.defineProperty(this, 'isModifiable', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isModifiable; },
			set: function(value) { _options.isModifiable = value; }
		});
		Object.defineProperty(this, 'isDeletable', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isDeletable; },
			set: function(value) { _options.isDeletable = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.eventDto = function(options) {
		var _options = {
			transactionId: "",
			source: "",
			timestamp: new Date(),
			actionCodeId: null,
			orderTimestamp: new Date(),
			orderEffectiveTimestamp: null,
			actionReason: "",
			originalMessage: ""
		}
		Object.defineProperty(this, 'transactionId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.transactionId; },
			set: function(value) { _options.transactionId = value; }
		});
		Object.defineProperty(this, 'source', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.source; },
			set: function(value) { _options.source = value; }
		});
		Object.defineProperty(this, 'timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timestamp; },
			set: function(value) { _options.timestamp = value; }
		});
		Object.defineProperty(this, 'actionCodeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.actionCodeId; },
			set: function(value) { _options.actionCodeId = value; }
		});
		Object.defineProperty(this, 'orderTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.orderTimestamp; },
			set: function(value) { _options.orderTimestamp = value; }
		});
		Object.defineProperty(this, 'orderEffectiveTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.orderEffectiveTimestamp; },
			set: function(value) { _options.orderEffectiveTimestamp = value; }
		});
		Object.defineProperty(this, 'actionReason', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.actionReason; },
			set: function(value) { _options.actionReason = value; }
		});
		Object.defineProperty(this, 'originalMessage', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.originalMessage; },
			set: function(value) { _options.originalMessage = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyDataDoseOnly = function(options) {
		var _options = {
			numberOfDoses: 0
		}
		// This property is readonly and its value must not be changed
		// in any way, since it is defined at the backend side.
		Object.defineProperty(this, 'templateType', {
			enumerable: true,
			configurable: true,
			get: function() { return "DoseOnly"; }
		});
		Object.defineProperty(this, 'numberOfDoses', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.numberOfDoses; },
			set: function(value) { _options.numberOfDoses = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyDataDays = function(options) {
		var _options = {
			timesPerDay: 0,
			isEveryDay: false,
			dayPatternFrequency: 0,
			dayPatternStep: 0,
			numberOfDoses: 0
		}
		// This property is readonly and its value must not be changed
		// in any way, since it is defined at the backend side.
		Object.defineProperty(this, 'templateType', {
			enumerable: true,
			configurable: true,
			get: function() { return "Days"; }
		});
		Object.defineProperty(this, 'timesPerDay', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timesPerDay; },
			set: function(value) { _options.timesPerDay = value; }
		});
		Object.defineProperty(this, 'isEveryDay', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isEveryDay; },
			set: function(value) { _options.isEveryDay = value; }
		});
		Object.defineProperty(this, 'dayPatternFrequency', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dayPatternFrequency; },
			set: function(value) { _options.dayPatternFrequency = value; }
		});
		Object.defineProperty(this, 'dayPatternStep', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dayPatternStep; },
			set: function(value) { _options.dayPatternStep = value; }
		});
		Object.defineProperty(this, 'numberOfDoses', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.numberOfDoses; },
			set: function(value) { _options.numberOfDoses = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyDataHours = function(options) {
		var _options = {
			hourFrequency: 0,
			numberOfDoses: 0
		}
		// This property is readonly and its value must not be changed
		// in any way, since it is defined at the backend side.
		Object.defineProperty(this, 'templateType', {
			enumerable: true,
			configurable: true,
			get: function() { return "Hours"; }
		});
		Object.defineProperty(this, 'hourFrequency', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.hourFrequency; },
			set: function(value) { _options.hourFrequency = value; }
		});
		Object.defineProperty(this, 'numberOfDoses', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.numberOfDoses; },
			set: function(value) { _options.numberOfDoses = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyDataWeeks = function(options) {
		var _options = {
			timesPerDay: 0,
			daysOfWeek: [],
			weekFrequency: 0,
			numberOfDoses: 0
		}
		// This property is readonly and its value must not be changed
		// in any way, since it is defined at the backend side.
		Object.defineProperty(this, 'templateType', {
			enumerable: true,
			configurable: true,
			get: function() { return "Weeks"; }
		});
		Object.defineProperty(this, 'timesPerDay', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timesPerDay; },
			set: function(value) { _options.timesPerDay = value; }
		});
		Object.defineProperty(this, 'daysOfWeek', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.daysOfWeek; },
			set: function(value) { _options.daysOfWeek = value; }
		});
		Object.defineProperty(this, 'weekFrequency', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.weekFrequency; },
			set: function(value) { _options.weekFrequency = value; }
		});
		Object.defineProperty(this, 'numberOfDoses', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.numberOfDoses; },
			set: function(value) { _options.numberOfDoses = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyDataInterval = function(options) {
		var _options = {
			timesPerDay: 0,
			dayIntervalFrom: 0,
			dayIntervalTo: 0,
			monthFrequency: 0,
			numberOfDoses: 0
		}
		// This property is readonly and its value must not be changed
		// in any way, since it is defined at the backend side.
		Object.defineProperty(this, 'templateType', {
			enumerable: true,
			configurable: true,
			get: function() { return "Intervals"; }
		});
		Object.defineProperty(this, 'timesPerDay', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timesPerDay; },
			set: function(value) { _options.timesPerDay = value; }
		});
		Object.defineProperty(this, 'dayIntervalFrom', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dayIntervalFrom; },
			set: function(value) { _options.dayIntervalFrom = value; }
		});
		Object.defineProperty(this, 'dayIntervalTo', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dayIntervalTo; },
			set: function(value) { _options.dayIntervalTo = value; }
		});
		Object.defineProperty(this, 'monthFrequency', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.monthFrequency; },
			set: function(value) { _options.monthFrequency = value; }
		});
		Object.defineProperty(this, 'numberOfDoses', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.numberOfDoses; },
			set: function(value) { _options.numberOfDoses = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.frequencyDataListDaysOfMonth = function(options) {
		var _options = {
			timesPerDay: 0,
			daysOfMonth: [],
			monthFrequency: 0,
			numberOfDoses: 0
		}
		// This property is readonly and its value must not be changed
		// in any way, since it is defined at the backend side.
		Object.defineProperty(this, 'templateType', {
			enumerable: true,
			configurable: true,
			get: function() { return "ListDaysOfMonth"; }
		});
		Object.defineProperty(this, 'timesPerDay', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timesPerDay; },
			set: function(value) { _options.timesPerDay = value; }
		});
		Object.defineProperty(this, 'daysOfMonth', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.daysOfMonth; },
			set: function(value) { _options.daysOfMonth = value; }
		});
		Object.defineProperty(this, 'monthFrequency', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.monthFrequency; },
			set: function(value) { _options.monthFrequency = value; }
		});
		Object.defineProperty(this, 'numberOfDoses', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.numberOfDoses; },
			set: function(value) { _options.numberOfDoses = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.mxCompositeDto = function(options) {
		var _options = {
			mxCompositeTypeId: null,
			instructions: "",
			mx: new Lgi.Emr.Mar.Dto.mxDto(),
			amount: null,
			amountUnitId: null,
			receivedValues: [],
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'mxCompositeTypeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mxCompositeTypeId; },
			set: function(value) { _options.mxCompositeTypeId = value; }
		});
		Object.defineProperty(this, 'instructions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.instructions; },
			set: function(value) { _options.instructions = value; }
		});
		Object.defineProperty(this, 'mx', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mx; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.mx = new Lgi.Emr.Mar.Dto.mxDto(value);
				else
					_options.mx = null; }
		});
		Object.defineProperty(this, 'amount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.amount; },
			set: function(value) { _options.amount = value; }
		});
		Object.defineProperty(this, 'amountUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.amountUnitId; },
			set: function(value) { _options.amountUnitId = value; }
		});
		Object.defineProperty(this, 'receivedValues', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receivedValues; },
			set: function(value) { _options.receivedValues = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.allergyInfoExtDto = function(options) {
		var _options = {
			noKnownAllergy: false,
			unableToObtain: false,
			allergies: []
		}
		Object.defineProperty(this, 'noKnownAllergy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.noKnownAllergy; },
			set: function(value) { _options.noKnownAllergy = value; }
		});
		Object.defineProperty(this, 'unableToObtain', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.unableToObtain; },
			set: function(value) { _options.unableToObtain = value; }
		});
		Object.defineProperty(this, 'allergies', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.allergies; },
			set: function(value) { _options.allergies = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.mrnExtDto = function(options) {
		var _options = {
			sourceID: "",
			value: ""
		}
		Object.defineProperty(this, 'sourceID', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sourceID; },
			set: function(value) { _options.sourceID = value; }
		});
		Object.defineProperty(this, 'value', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.value; },
			set: function(value) { _options.value = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.rxsCeaseDto = function(options) {
		var _options = {
			rxIds: [],
			rxCeaseDto: new Lgi.Emr.Mar.Dto.rxCeaseDto(),
			isExcludeMarkInError: false
		}
		Object.defineProperty(this, 'rxIds', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rxIds; },
			set: function(value) { _options.rxIds = value; }
		});
		Object.defineProperty(this, 'rxCeaseDto', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rxCeaseDto; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.rxCeaseDto = new Lgi.Emr.Mar.Dto.rxCeaseDto(value);
				else
					_options.rxCeaseDto = null; }
		});
		Object.defineProperty(this, 'isExcludeMarkInError', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isExcludeMarkInError; },
			set: function(value) { _options.isExcludeMarkInError = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.ObservationExtDto = function(options) {
		var _options = {
			timestamp: new Date(),
			code: "",
			source: "",
			value: "",
			unitCode: "",
			comment: "",
			descriptors: "",
			site: "",
			position: "",
			method: "",
			reaction: ""
		}
		Object.defineProperty(this, 'timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timestamp; },
			set: function(value) { _options.timestamp = value; }
		});
		Object.defineProperty(this, 'code', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.code; },
			set: function(value) { _options.code = value; }
		});
		Object.defineProperty(this, 'source', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.source; },
			set: function(value) { _options.source = value; }
		});
		Object.defineProperty(this, 'value', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.value; },
			set: function(value) { _options.value = value; }
		});
		Object.defineProperty(this, 'unitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.unitCode; },
			set: function(value) { _options.unitCode = value; }
		});
		Object.defineProperty(this, 'comment', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.comment; },
			set: function(value) { _options.comment = value; }
		});
		Object.defineProperty(this, 'descriptors', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.descriptors; },
			set: function(value) { _options.descriptors = value; }
		});
		Object.defineProperty(this, 'site', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.site; },
			set: function(value) { _options.site = value; }
		});
		Object.defineProperty(this, 'position', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.position; },
			set: function(value) { _options.position = value; }
		});
		Object.defineProperty(this, 'method', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.method; },
			set: function(value) { _options.method = value; }
		});
		Object.defineProperty(this, 'reaction', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.reaction; },
			set: function(value) { _options.reaction = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.rxCollectionSuspensionDto = function(options) {
		var _options = {
			rxIds: [],
			suspension: new Lgi.Emr.Mar.Dto.suspensionDto()
		}
		Object.defineProperty(this, 'rxIds', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rxIds; },
			set: function(value) { _options.rxIds = value; }
		});
		Object.defineProperty(this, 'suspension', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.suspension; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.suspension = new Lgi.Emr.Mar.Dto.suspensionDto(value);
				else
					_options.suspension = null; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.rxCeaseDto = function(options) {
		var _options = {
			effectiveTimestamp: null,
			reasonId: null,
			note: ""
		}
		Object.defineProperty(this, 'effectiveTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.effectiveTimestamp; },
			set: function(value) { _options.effectiveTimestamp = value; }
		});
		Object.defineProperty(this, 'reasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.reasonId; },
			set: function(value) { _options.reasonId = value; }
		});
		Object.defineProperty(this, 'note', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.note; },
			set: function(value) { _options.note = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.mrnDto = function(options) {
		var _options = {
			sourceId: "",
			value: "",
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'sourceId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sourceId; },
			set: function(value) { _options.sourceId = value; }
		});
		Object.defineProperty(this, 'value', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.value; },
			set: function(value) { _options.value = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.observationDto = function(options) {
		var _options = {
			timestamp: null,
			data: "",
			dataAsString: "",
			observationTypeId: null,
			isNew: false,
			observedBy: new Lgi.Emr.Mar.Dto.userDto(),
			obxContainers: [],
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timestamp; },
			set: function(value) { _options.timestamp = value; }
		});
		Object.defineProperty(this, 'data', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.data; },
			set: function(value) { _options.data = value; }
		});
		Object.defineProperty(this, 'dataAsString', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dataAsString; },
			set: function(value) { _options.dataAsString = value; }
		});
		Object.defineProperty(this, 'observationTypeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.observationTypeId; },
			set: function(value) { _options.observationTypeId = value; }
		});
		Object.defineProperty(this, 'isNew', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isNew; },
			set: function(value) { _options.isNew = value; }
		});
		Object.defineProperty(this, 'observedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.observedBy; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.observedBy = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.observedBy = null; }
		});
		Object.defineProperty(this, 'obxContainers', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.obxContainers; },
			set: function(value) { _options.obxContainers = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.obxContainerDto = function(options) {
		var _options = {
			dataType: "",
			identifier: new Lgi.Emr.Mar.Dto.HL7CodedElementDto(),
			value: "",
			units: new Lgi.Emr.Mar.Dto.HL7CodedElementDto(),
			resultStatus: "",
			timestamp: new Date(),
			user: new Lgi.Emr.Mar.Dto.userDto(),
			observationMethods: new Lgi.Emr.Mar.Dto.HL7CodedElementDto(),
			observationSite: "",
			uniqueIdentifier: "",
			position: new Lgi.Emr.Mar.Dto.HL7CodedElementDto(),
			descriptors: [],
			invalidationReason: new Lgi.Emr.Mar.Dto.HL7CodedElementDto()
		}
		Object.defineProperty(this, 'dataType', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dataType; },
			set: function(value) { _options.dataType = value; }
		});
		Object.defineProperty(this, 'identifier', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.identifier; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.identifier = new Lgi.Emr.Mar.Dto.HL7CodedElementDto(value);
				else
					_options.identifier = null; }
		});
		Object.defineProperty(this, 'value', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.value; },
			set: function(value) { _options.value = value; }
		});
		Object.defineProperty(this, 'units', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.units; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.units = new Lgi.Emr.Mar.Dto.HL7CodedElementDto(value);
				else
					_options.units = null; }
		});
		Object.defineProperty(this, 'resultStatus', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.resultStatus; },
			set: function(value) { _options.resultStatus = value; }
		});
		Object.defineProperty(this, 'timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.timestamp; },
			set: function(value) { _options.timestamp = value; }
		});
		Object.defineProperty(this, 'user', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.user; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.user = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.user = null; }
		});
		Object.defineProperty(this, 'observationMethods', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.observationMethods; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.observationMethods = new Lgi.Emr.Mar.Dto.HL7CodedElementDto(value);
				else
					_options.observationMethods = null; }
		});
		Object.defineProperty(this, 'observationSite', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.observationSite; },
			set: function(value) { _options.observationSite = value; }
		});
		Object.defineProperty(this, 'uniqueIdentifier', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.uniqueIdentifier; },
			set: function(value) { _options.uniqueIdentifier = value; }
		});
		Object.defineProperty(this, 'position', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.position; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.position = new Lgi.Emr.Mar.Dto.HL7CodedElementDto(value);
				else
					_options.position = null; }
		});
		Object.defineProperty(this, 'descriptors', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.descriptors; },
			set: function(value) { _options.descriptors = value; }
		});
		Object.defineProperty(this, 'invalidationReason', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.invalidationReason; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.invalidationReason = new Lgi.Emr.Mar.Dto.HL7CodedElementDto(value);
				else
					_options.invalidationReason = null; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.patientExtDto = function(options) {
		var _options = {
			patientID: "",
			firstName: "",
			lastName: "",
			fullName: "",
			sex: "",
			dateOfBirth: "",
			age: "",
			gestationalAge: "",
			height: "",
			heightUnitCode: "",
			heightUnit: "",
			heightUpdateDtm: "",
			weight: "",
			weightUnitCode: "",
			weightUnit: "",
			weightUpdateDtm: "",
			BMI: "",
			BSA: "",
			BSAUnitCode: "",
			BSAUnit: "",
			vitalSigns: [],
			allergyInfo: new Lgi.Emr.Mar.Dto.allergyInfoExtDto(),
			metadata: []
		}
		Object.defineProperty(this, 'patientID', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.patientID; },
			set: function(value) { _options.patientID = value; }
		});
		Object.defineProperty(this, 'firstName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.firstName; },
			set: function(value) { _options.firstName = value; }
		});
		Object.defineProperty(this, 'lastName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.lastName; },
			set: function(value) { _options.lastName = value; }
		});
		Object.defineProperty(this, 'fullName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.fullName; },
			set: function(value) { _options.fullName = value; }
		});
		Object.defineProperty(this, 'sex', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sex; },
			set: function(value) { _options.sex = value; }
		});
		Object.defineProperty(this, 'dateOfBirth', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dateOfBirth; },
			set: function(value) { _options.dateOfBirth = value; }
		});
		Object.defineProperty(this, 'age', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.age; },
			set: function(value) { _options.age = value; }
		});
		Object.defineProperty(this, 'gestationalAge', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.gestationalAge; },
			set: function(value) { _options.gestationalAge = value; }
		});
		Object.defineProperty(this, 'height', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.height; },
			set: function(value) { _options.height = value; }
		});
		Object.defineProperty(this, 'heightUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.heightUnitCode; },
			set: function(value) { _options.heightUnitCode = value; }
		});
		Object.defineProperty(this, 'heightUnit', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.heightUnit; },
			set: function(value) { _options.heightUnit = value; }
		});
		Object.defineProperty(this, 'heightUpdateDtm', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.heightUpdateDtm; },
			set: function(value) { _options.heightUpdateDtm = value; }
		});
		Object.defineProperty(this, 'weight', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.weight; },
			set: function(value) { _options.weight = value; }
		});
		Object.defineProperty(this, 'weightUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.weightUnitCode; },
			set: function(value) { _options.weightUnitCode = value; }
		});
		Object.defineProperty(this, 'weightUnit', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.weightUnit; },
			set: function(value) { _options.weightUnit = value; }
		});
		Object.defineProperty(this, 'weightUpdateDtm', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.weightUpdateDtm; },
			set: function(value) { _options.weightUpdateDtm = value; }
		});
		Object.defineProperty(this, 'BMI', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.BMI; },
			set: function(value) { _options.BMI = value; }
		});
		Object.defineProperty(this, 'BSA', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.BSA; },
			set: function(value) { _options.BSA = value; }
		});
		Object.defineProperty(this, 'BSAUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.BSAUnitCode; },
			set: function(value) { _options.BSAUnitCode = value; }
		});
		Object.defineProperty(this, 'BSAUnit', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.BSAUnit; },
			set: function(value) { _options.BSAUnit = value; }
		});
		Object.defineProperty(this, 'vitalSigns', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.vitalSigns; },
			set: function(value) { _options.vitalSigns = value; }
		});
		Object.defineProperty(this, 'allergyInfo', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.allergyInfo; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.allergyInfo = new Lgi.Emr.Mar.Dto.allergyInfoExtDto(value);
				else
					_options.allergyInfo = null; }
		});
		Object.defineProperty(this, 'metadata', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.metadata; },
			set: function(value) { _options.metadata = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.OperationEnum = {
		Create: 0,
		Update: 1,
		Delete: 2,
	};
	ns.rosterCellDto = function(options) {
		var _options = {
			value: ""
		}
		Object.defineProperty(this, 'value', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.value; },
			set: function(value) { _options.value = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.rosterRowDto = function(options) {
		var _options = {
			isHeader: false,
			cells: [],
			state: "",
			pid: "",
			encounterSID: "",
			visitId: "",
			visitAdministrationPriorityId: ""
		}
		Object.defineProperty(this, 'isHeader', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isHeader; },
			set: function(value) { _options.isHeader = value; }
		});
		Object.defineProperty(this, 'cells', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cells; },
			set: function(value) { _options.cells = value; }
		});
		Object.defineProperty(this, 'state', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.state; },
			set: function(value) { _options.state = value; }
		});
		Object.defineProperty(this, 'pid', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.pid; },
			set: function(value) { _options.pid = value; }
		});
		Object.defineProperty(this, 'encounterSID', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.encounterSID; },
			set: function(value) { _options.encounterSID = value; }
		});
		Object.defineProperty(this, 'visitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.visitId; },
			set: function(value) { _options.visitId = value; }
		});
		Object.defineProperty(this, 'visitAdministrationPriorityId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.visitAdministrationPriorityId; },
			set: function(value) { _options.visitAdministrationPriorityId = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.rosterDto = function(options) {
		var _options = {
			rosterId: "",
			name: ""
		}
		Object.defineProperty(this, 'rosterId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rosterId; },
			set: function(value) { _options.rosterId = value; }
		});
		Object.defineProperty(this, 'name', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.name; },
			set: function(value) { _options.name = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.parameterDto = function(options) {
		var _options = {
			gracePeriodForInactivePrescription: null,
			completedPrescriptionCount: null,
			ceasedPrescriptionCount: null,
			adhocPrescriptionsMaxDuration: null,
			completedAdhocDurationDisplay: null,
			maxFutureAdministrations: null,
			doubleSignatureAdhocPrescriptions: false,
			doubleSignatureAdminAdhocPrescriptions: false,
			canRemoveSuspensionByPharmacy: false,
			nextAdmDefaultFilter: 0,
			duePrescriptionDurationDisplay: 0,
			cessationReasonMandatory: false,
			suspensionReasonMandatory: false,
			cessationReactivationReasonMandatory: false,
			stopSuspensionReasonMandatory: false,
			maxFrequencyTimesPerDay: 0,
			patchApplicationSiteMandatory: false,
			isDebugMode: false,
			advisorProfessionalCalculationIndexUrl: "",
			advisorMonographUrl: "",
			id: 0
		}
		Object.defineProperty(this, 'gracePeriodForInactivePrescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.gracePeriodForInactivePrescription; },
			set: function(value) { _options.gracePeriodForInactivePrescription = value; }
		});
		Object.defineProperty(this, 'completedPrescriptionCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.completedPrescriptionCount; },
			set: function(value) { _options.completedPrescriptionCount = value; }
		});
		Object.defineProperty(this, 'ceasedPrescriptionCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.ceasedPrescriptionCount; },
			set: function(value) { _options.ceasedPrescriptionCount = value; }
		});
		Object.defineProperty(this, 'adhocPrescriptionsMaxDuration', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.adhocPrescriptionsMaxDuration; },
			set: function(value) { _options.adhocPrescriptionsMaxDuration = value; }
		});
		Object.defineProperty(this, 'completedAdhocDurationDisplay', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.completedAdhocDurationDisplay; },
			set: function(value) { _options.completedAdhocDurationDisplay = value; }
		});
		Object.defineProperty(this, 'maxFutureAdministrations', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.maxFutureAdministrations; },
			set: function(value) { _options.maxFutureAdministrations = value; }
		});
		Object.defineProperty(this, 'doubleSignatureAdhocPrescriptions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.doubleSignatureAdhocPrescriptions; },
			set: function(value) { _options.doubleSignatureAdhocPrescriptions = value; }
		});
		Object.defineProperty(this, 'doubleSignatureAdminAdhocPrescriptions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.doubleSignatureAdminAdhocPrescriptions; },
			set: function(value) { _options.doubleSignatureAdminAdhocPrescriptions = value; }
		});
		Object.defineProperty(this, 'canRemoveSuspensionByPharmacy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.canRemoveSuspensionByPharmacy; },
			set: function(value) { _options.canRemoveSuspensionByPharmacy = value; }
		});
		Object.defineProperty(this, 'nextAdmDefaultFilter', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.nextAdmDefaultFilter; },
			set: function(value) { _options.nextAdmDefaultFilter = value; }
		});
		Object.defineProperty(this, 'duePrescriptionDurationDisplay', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.duePrescriptionDurationDisplay; },
			set: function(value) { _options.duePrescriptionDurationDisplay = value; }
		});
		Object.defineProperty(this, 'cessationReasonMandatory', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cessationReasonMandatory; },
			set: function(value) { _options.cessationReasonMandatory = value; }
		});
		Object.defineProperty(this, 'suspensionReasonMandatory', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.suspensionReasonMandatory; },
			set: function(value) { _options.suspensionReasonMandatory = value; }
		});
		Object.defineProperty(this, 'cessationReactivationReasonMandatory', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cessationReactivationReasonMandatory; },
			set: function(value) { _options.cessationReactivationReasonMandatory = value; }
		});
		Object.defineProperty(this, 'stopSuspensionReasonMandatory', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.stopSuspensionReasonMandatory; },
			set: function(value) { _options.stopSuspensionReasonMandatory = value; }
		});
		Object.defineProperty(this, 'maxFrequencyTimesPerDay', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.maxFrequencyTimesPerDay; },
			set: function(value) { _options.maxFrequencyTimesPerDay = value; }
		});
		Object.defineProperty(this, 'patchApplicationSiteMandatory', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.patchApplicationSiteMandatory; },
			set: function(value) { _options.patchApplicationSiteMandatory = value; }
		});
		Object.defineProperty(this, 'isDebugMode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isDebugMode; },
			set: function(value) { _options.isDebugMode = value; }
		});
		Object.defineProperty(this, 'advisorProfessionalCalculationIndexUrl', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.advisorProfessionalCalculationIndexUrl; },
			set: function(value) { _options.advisorProfessionalCalculationIndexUrl = value; }
		});
		Object.defineProperty(this, 'advisorMonographUrl', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.advisorMonographUrl; },
			set: function(value) { _options.advisorMonographUrl = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.rxDto = function(options) {
		var _options = {
			pharmacyId: "",
			sourcePharmacyId: "",
			receptionTimestamp: new Date(),
			isProcessed: false,
			processStartTimestamp: null,
			dosageTypeId: null,
			instructions: "",
			adhocManualDose: "",
			posologyExpression: "",
			nursingDirectives: "",
			areAdministrationsMustBeSigned: false,
			isAutoMedicated: false,
			isOwnMedication: false,
			isAdhocGenericDuplication: false,
			mustBeSigned: false,
			dosageMustBeDoubleVerified: false,
			maximumAdministrationCount: null,
			adhocReasonId: null,
			routeId: null,
			prescription: new Lgi.Emr.Mar.Dto.prescriptionDto(),
			rxSourceId: null,
			rxStatusId: null,
			mx: new Lgi.Emr.Mar.Dto.mxDto(),
			mxComposites: [],
			schedule: new Lgi.Emr.Mar.Dto.scheduleDto(),
			currentVisit: new Lgi.Emr.Mar.Dto.visitDto(),
			cessationReasonId: null,
			isMarCessation: false,
			cessationTimestamp: null,
			cessationNote: "",
			reactivationNote: "",
			suspension: new Lgi.Emr.Mar.Dto.suspensionDto(),
			dosageVerification1User: new Lgi.Emr.Mar.Dto.userDto(),
			dosageVerification1ResultId: null,
			dosageVerification1Timestamp: null,
			dosageVerification2User: new Lgi.Emr.Mar.Dto.userDto(),
			dosageVerification2ResultId: null,
			dosageVerification2Timestamp: null,
			receivedValues: [],
			signature: new Lgi.Emr.Mar.Dto.signatureDto(),
			administrations: [],
			metaWorkflows: [],
			isInactive: false,
			isDue: false,
			isLate: false,
			realEndTimestamp: null,
			administrationsToSign: 0,
			administrationsCount: 0,
			realizedAdministrationsCount: 0,
			extraDoseAdministrationsCount: 0,
			createdBy: 0,
			modifiedBy: null,
			modifiedOn: null,
			verifiedBy: null,
			verifiedOn: null,
			isRxContinueLastAdministrationCompleted: false,
			medicationLocation: "",
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'pharmacyId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.pharmacyId; },
			set: function(value) { _options.pharmacyId = value; }
		});
		Object.defineProperty(this, 'sourcePharmacyId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sourcePharmacyId; },
			set: function(value) { _options.sourcePharmacyId = value; }
		});
		Object.defineProperty(this, 'receptionTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receptionTimestamp; },
			set: function(value) { _options.receptionTimestamp = value; }
		});
		Object.defineProperty(this, 'isProcessed', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isProcessed; },
			set: function(value) { _options.isProcessed = value; }
		});
		Object.defineProperty(this, 'processStartTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.processStartTimestamp; },
			set: function(value) { _options.processStartTimestamp = value; }
		});
		Object.defineProperty(this, 'dosageTypeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageTypeId; },
			set: function(value) { _options.dosageTypeId = value; }
		});
		Object.defineProperty(this, 'instructions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.instructions; },
			set: function(value) { _options.instructions = value; }
		});
		Object.defineProperty(this, 'adhocManualDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.adhocManualDose; },
			set: function(value) { _options.adhocManualDose = value; }
		});
		Object.defineProperty(this, 'posologyExpression', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.posologyExpression; },
			set: function(value) { _options.posologyExpression = value; }
		});
		Object.defineProperty(this, 'nursingDirectives', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.nursingDirectives; },
			set: function(value) { _options.nursingDirectives = value; }
		});
		Object.defineProperty(this, 'areAdministrationsMustBeSigned', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.areAdministrationsMustBeSigned; },
			set: function(value) { _options.areAdministrationsMustBeSigned = value; }
		});
		Object.defineProperty(this, 'isAutoMedicated', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isAutoMedicated; },
			set: function(value) { _options.isAutoMedicated = value; }
		});
		Object.defineProperty(this, 'isOwnMedication', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isOwnMedication; },
			set: function(value) { _options.isOwnMedication = value; }
		});
		Object.defineProperty(this, 'isAdhocGenericDuplication', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isAdhocGenericDuplication; },
			set: function(value) { _options.isAdhocGenericDuplication = value; }
		});
		Object.defineProperty(this, 'mustBeSigned', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mustBeSigned; },
			set: function(value) { _options.mustBeSigned = value; }
		});
		Object.defineProperty(this, 'dosageMustBeDoubleVerified', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageMustBeDoubleVerified; },
			set: function(value) { _options.dosageMustBeDoubleVerified = value; }
		});
		Object.defineProperty(this, 'maximumAdministrationCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.maximumAdministrationCount; },
			set: function(value) { _options.maximumAdministrationCount = value; }
		});
		Object.defineProperty(this, 'adhocReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.adhocReasonId; },
			set: function(value) { _options.adhocReasonId = value; }
		});
		Object.defineProperty(this, 'routeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.routeId; },
			set: function(value) { _options.routeId = value; }
		});
		Object.defineProperty(this, 'prescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.prescription; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.prescription = new Lgi.Emr.Mar.Dto.prescriptionDto(value);
				else
					_options.prescription = null; }
		});
		Object.defineProperty(this, 'rxSourceId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rxSourceId; },
			set: function(value) { _options.rxSourceId = value; }
		});
		Object.defineProperty(this, 'rxStatusId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rxStatusId; },
			set: function(value) { _options.rxStatusId = value; }
		});
		Object.defineProperty(this, 'mx', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mx; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.mx = new Lgi.Emr.Mar.Dto.mxDto(value);
				else
					_options.mx = null; }
		});
		Object.defineProperty(this, 'mxComposites', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mxComposites; },
			set: function(value) { _options.mxComposites = value; }
		});
		Object.defineProperty(this, 'schedule', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.schedule; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.schedule = new Lgi.Emr.Mar.Dto.scheduleDto(value);
				else
					_options.schedule = null; }
		});
		Object.defineProperty(this, 'currentVisit', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.currentVisit; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.currentVisit = new Lgi.Emr.Mar.Dto.visitDto(value);
				else
					_options.currentVisit = null; }
		});
		Object.defineProperty(this, 'cessationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cessationReasonId; },
			set: function(value) { _options.cessationReasonId = value; }
		});
		Object.defineProperty(this, 'isMarCessation', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isMarCessation; },
			set: function(value) { _options.isMarCessation = value; }
		});
		Object.defineProperty(this, 'cessationTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cessationTimestamp; },
			set: function(value) { _options.cessationTimestamp = value; }
		});
		Object.defineProperty(this, 'cessationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cessationNote; },
			set: function(value) { _options.cessationNote = value; }
		});
		Object.defineProperty(this, 'reactivationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.reactivationNote; },
			set: function(value) { _options.reactivationNote = value; }
		});
		Object.defineProperty(this, 'suspension', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.suspension; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.suspension = new Lgi.Emr.Mar.Dto.suspensionDto(value);
				else
					_options.suspension = null; }
		});
		Object.defineProperty(this, 'dosageVerification1User', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification1User; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.dosageVerification1User = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.dosageVerification1User = null; }
		});
		Object.defineProperty(this, 'dosageVerification1ResultId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification1ResultId; },
			set: function(value) { _options.dosageVerification1ResultId = value; }
		});
		Object.defineProperty(this, 'dosageVerification1Timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification1Timestamp; },
			set: function(value) { _options.dosageVerification1Timestamp = value; }
		});
		Object.defineProperty(this, 'dosageVerification2User', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification2User; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.dosageVerification2User = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.dosageVerification2User = null; }
		});
		Object.defineProperty(this, 'dosageVerification2ResultId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification2ResultId; },
			set: function(value) { _options.dosageVerification2ResultId = value; }
		});
		Object.defineProperty(this, 'dosageVerification2Timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification2Timestamp; },
			set: function(value) { _options.dosageVerification2Timestamp = value; }
		});
		Object.defineProperty(this, 'receivedValues', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receivedValues; },
			set: function(value) { _options.receivedValues = value; }
		});
		Object.defineProperty(this, 'signature', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.signature; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.signature = new Lgi.Emr.Mar.Dto.signatureDto(value);
				else
					_options.signature = null; }
		});
		Object.defineProperty(this, 'administrations', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrations; },
			set: function(value) { _options.administrations = value; }
		});
		Object.defineProperty(this, 'metaWorkflows', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.metaWorkflows; },
			set: function(value) { _options.metaWorkflows = value; }
		});
		Object.defineProperty(this, 'isInactive', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isInactive; },
			set: function(value) { _options.isInactive = value; }
		});
		Object.defineProperty(this, 'isDue', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isDue; },
			set: function(value) { _options.isDue = value; }
		});
		Object.defineProperty(this, 'isLate', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isLate; },
			set: function(value) { _options.isLate = value; }
		});
		Object.defineProperty(this, 'realEndTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.realEndTimestamp; },
			set: function(value) { _options.realEndTimestamp = value; }
		});
		Object.defineProperty(this, 'administrationsToSign', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationsToSign; },
			set: function(value) { _options.administrationsToSign = value; }
		});
		Object.defineProperty(this, 'administrationsCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationsCount; },
			set: function(value) { _options.administrationsCount = value; }
		});
		Object.defineProperty(this, 'realizedAdministrationsCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.realizedAdministrationsCount; },
			set: function(value) { _options.realizedAdministrationsCount = value; }
		});
		Object.defineProperty(this, 'extraDoseAdministrationsCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.extraDoseAdministrationsCount; },
			set: function(value) { _options.extraDoseAdministrationsCount = value; }
		});
		Object.defineProperty(this, 'createdBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.createdBy; },
			set: function(value) { _options.createdBy = value; }
		});
		Object.defineProperty(this, 'modifiedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.modifiedBy; },
			set: function(value) { _options.modifiedBy = value; }
		});
		Object.defineProperty(this, 'modifiedOn', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.modifiedOn; },
			set: function(value) { _options.modifiedOn = value; }
		});
		Object.defineProperty(this, 'verifiedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.verifiedBy; },
			set: function(value) { _options.verifiedBy = value; }
		});
		Object.defineProperty(this, 'verifiedOn', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.verifiedOn; },
			set: function(value) { _options.verifiedOn = value; }
		});
		Object.defineProperty(this, 'isRxContinueLastAdministrationCompleted', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isRxContinueLastAdministrationCompleted; },
			set: function(value) { _options.isRxContinueLastAdministrationCompleted = value; }
		});
		Object.defineProperty(this, 'medicationLocation', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.medicationLocation; },
			set: function(value) { _options.medicationLocation = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.RxNotificationDto = function(options) {
		var _options = {
			pharmacyId: "",
			sourcePharmacyId: "",
			receptionTimestamp: new Date(),
			isProcessed: false,
			processStartTimestamp: null,
			dosageTypeId: null,
			instructions: "",
			adhocManualDose: "",
			posologyExpression: "",
			nursingDirectives: "",
			areAdministrationsMustBeSigned: false,
			isAutoMedicated: false,
			isOwnMedication: false,
			isAdhocGenericDuplication: false,
			mustBeSigned: false,
			dosageMustBeDoubleVerified: false,
			maximumAdministrationCount: null,
			adhocReasonId: null,
			routeId: null,
			prescription: new Lgi.Emr.Mar.Dto.prescriptionDto(),
			rxSourceId: null,
			rxStatusId: null,
			mx: new Lgi.Emr.Mar.Dto.mxDto(),
			mxComposites: [],
			schedule: new Lgi.Emr.Mar.Dto.scheduleDto(),
			currentVisit: new Lgi.Emr.Mar.Dto.visitDto(),
			cessationReasonId: null,
			isMarCessation: false,
			cessationTimestamp: null,
			cessationNote: "",
			reactivationNote: "",
			suspension: new Lgi.Emr.Mar.Dto.suspensionDto(),
			dosageVerification1User: new Lgi.Emr.Mar.Dto.userDto(),
			dosageVerification1ResultId: null,
			dosageVerification1Timestamp: null,
			dosageVerification2User: new Lgi.Emr.Mar.Dto.userDto(),
			dosageVerification2ResultId: null,
			dosageVerification2Timestamp: null,
			receivedValues: [],
			signature: new Lgi.Emr.Mar.Dto.signatureDto(),
			administrations: [],
			metaWorkflows: [],
			isInactive: false,
			isDue: false,
			isLate: false,
			realEndTimestamp: null,
			administrationsToSign: 0,
			administrationsCount: 0,
			realizedAdministrationsCount: 0,
			extraDoseAdministrationsCount: 0,
			createdBy: 0,
			modifiedBy: null,
			modifiedOn: null,
			verifiedBy: null,
			verifiedOn: null,
			isRxContinueLastAdministrationCompleted: false,
			medicationLocation: "",
			version: 0,
			id: 0,
			dosageTypeCode: "",
			dosageTypeDescription: "",
			routeCode: "",
			routeDescription: ""
		}
		Object.defineProperty(this, 'pharmacyId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.pharmacyId; },
			set: function(value) { _options.pharmacyId = value; }
		});
		Object.defineProperty(this, 'sourcePharmacyId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sourcePharmacyId; },
			set: function(value) { _options.sourcePharmacyId = value; }
		});
		Object.defineProperty(this, 'receptionTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receptionTimestamp; },
			set: function(value) { _options.receptionTimestamp = value; }
		});
		Object.defineProperty(this, 'isProcessed', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isProcessed; },
			set: function(value) { _options.isProcessed = value; }
		});
		Object.defineProperty(this, 'processStartTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.processStartTimestamp; },
			set: function(value) { _options.processStartTimestamp = value; }
		});
		Object.defineProperty(this, 'dosageTypeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageTypeId; },
			set: function(value) { _options.dosageTypeId = value; }
		});
		Object.defineProperty(this, 'instructions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.instructions; },
			set: function(value) { _options.instructions = value; }
		});
		Object.defineProperty(this, 'adhocManualDose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.adhocManualDose; },
			set: function(value) { _options.adhocManualDose = value; }
		});
		Object.defineProperty(this, 'posologyExpression', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.posologyExpression; },
			set: function(value) { _options.posologyExpression = value; }
		});
		Object.defineProperty(this, 'nursingDirectives', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.nursingDirectives; },
			set: function(value) { _options.nursingDirectives = value; }
		});
		Object.defineProperty(this, 'areAdministrationsMustBeSigned', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.areAdministrationsMustBeSigned; },
			set: function(value) { _options.areAdministrationsMustBeSigned = value; }
		});
		Object.defineProperty(this, 'isAutoMedicated', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isAutoMedicated; },
			set: function(value) { _options.isAutoMedicated = value; }
		});
		Object.defineProperty(this, 'isOwnMedication', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isOwnMedication; },
			set: function(value) { _options.isOwnMedication = value; }
		});
		Object.defineProperty(this, 'isAdhocGenericDuplication', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isAdhocGenericDuplication; },
			set: function(value) { _options.isAdhocGenericDuplication = value; }
		});
		Object.defineProperty(this, 'mustBeSigned', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mustBeSigned; },
			set: function(value) { _options.mustBeSigned = value; }
		});
		Object.defineProperty(this, 'dosageMustBeDoubleVerified', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageMustBeDoubleVerified; },
			set: function(value) { _options.dosageMustBeDoubleVerified = value; }
		});
		Object.defineProperty(this, 'maximumAdministrationCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.maximumAdministrationCount; },
			set: function(value) { _options.maximumAdministrationCount = value; }
		});
		Object.defineProperty(this, 'adhocReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.adhocReasonId; },
			set: function(value) { _options.adhocReasonId = value; }
		});
		Object.defineProperty(this, 'routeId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.routeId; },
			set: function(value) { _options.routeId = value; }
		});
		Object.defineProperty(this, 'prescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.prescription; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.prescription = new Lgi.Emr.Mar.Dto.prescriptionDto(value);
				else
					_options.prescription = null; }
		});
		Object.defineProperty(this, 'rxSourceId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rxSourceId; },
			set: function(value) { _options.rxSourceId = value; }
		});
		Object.defineProperty(this, 'rxStatusId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rxStatusId; },
			set: function(value) { _options.rxStatusId = value; }
		});
		Object.defineProperty(this, 'mx', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mx; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.mx = new Lgi.Emr.Mar.Dto.mxDto(value);
				else
					_options.mx = null; }
		});
		Object.defineProperty(this, 'mxComposites', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mxComposites; },
			set: function(value) { _options.mxComposites = value; }
		});
		Object.defineProperty(this, 'schedule', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.schedule; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.schedule = new Lgi.Emr.Mar.Dto.scheduleDto(value);
				else
					_options.schedule = null; }
		});
		Object.defineProperty(this, 'currentVisit', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.currentVisit; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.currentVisit = new Lgi.Emr.Mar.Dto.visitDto(value);
				else
					_options.currentVisit = null; }
		});
		Object.defineProperty(this, 'cessationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cessationReasonId; },
			set: function(value) { _options.cessationReasonId = value; }
		});
		Object.defineProperty(this, 'isMarCessation', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isMarCessation; },
			set: function(value) { _options.isMarCessation = value; }
		});
		Object.defineProperty(this, 'cessationTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cessationTimestamp; },
			set: function(value) { _options.cessationTimestamp = value; }
		});
		Object.defineProperty(this, 'cessationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cessationNote; },
			set: function(value) { _options.cessationNote = value; }
		});
		Object.defineProperty(this, 'reactivationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.reactivationNote; },
			set: function(value) { _options.reactivationNote = value; }
		});
		Object.defineProperty(this, 'suspension', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.suspension; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.suspension = new Lgi.Emr.Mar.Dto.suspensionDto(value);
				else
					_options.suspension = null; }
		});
		Object.defineProperty(this, 'dosageVerification1User', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification1User; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.dosageVerification1User = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.dosageVerification1User = null; }
		});
		Object.defineProperty(this, 'dosageVerification1ResultId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification1ResultId; },
			set: function(value) { _options.dosageVerification1ResultId = value; }
		});
		Object.defineProperty(this, 'dosageVerification1Timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification1Timestamp; },
			set: function(value) { _options.dosageVerification1Timestamp = value; }
		});
		Object.defineProperty(this, 'dosageVerification2User', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification2User; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.dosageVerification2User = new Lgi.Emr.Mar.Dto.userDto(value);
				else
					_options.dosageVerification2User = null; }
		});
		Object.defineProperty(this, 'dosageVerification2ResultId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification2ResultId; },
			set: function(value) { _options.dosageVerification2ResultId = value; }
		});
		Object.defineProperty(this, 'dosageVerification2Timestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageVerification2Timestamp; },
			set: function(value) { _options.dosageVerification2Timestamp = value; }
		});
		Object.defineProperty(this, 'receivedValues', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receivedValues; },
			set: function(value) { _options.receivedValues = value; }
		});
		Object.defineProperty(this, 'signature', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.signature; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.signature = new Lgi.Emr.Mar.Dto.signatureDto(value);
				else
					_options.signature = null; }
		});
		Object.defineProperty(this, 'administrations', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrations; },
			set: function(value) { _options.administrations = value; }
		});
		Object.defineProperty(this, 'metaWorkflows', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.metaWorkflows; },
			set: function(value) { _options.metaWorkflows = value; }
		});
		Object.defineProperty(this, 'isInactive', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isInactive; },
			set: function(value) { _options.isInactive = value; }
		});
		Object.defineProperty(this, 'isDue', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isDue; },
			set: function(value) { _options.isDue = value; }
		});
		Object.defineProperty(this, 'isLate', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isLate; },
			set: function(value) { _options.isLate = value; }
		});
		Object.defineProperty(this, 'realEndTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.realEndTimestamp; },
			set: function(value) { _options.realEndTimestamp = value; }
		});
		Object.defineProperty(this, 'administrationsToSign', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationsToSign; },
			set: function(value) { _options.administrationsToSign = value; }
		});
		Object.defineProperty(this, 'administrationsCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationsCount; },
			set: function(value) { _options.administrationsCount = value; }
		});
		Object.defineProperty(this, 'realizedAdministrationsCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.realizedAdministrationsCount; },
			set: function(value) { _options.realizedAdministrationsCount = value; }
		});
		Object.defineProperty(this, 'extraDoseAdministrationsCount', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.extraDoseAdministrationsCount; },
			set: function(value) { _options.extraDoseAdministrationsCount = value; }
		});
		Object.defineProperty(this, 'createdBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.createdBy; },
			set: function(value) { _options.createdBy = value; }
		});
		Object.defineProperty(this, 'modifiedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.modifiedBy; },
			set: function(value) { _options.modifiedBy = value; }
		});
		Object.defineProperty(this, 'modifiedOn', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.modifiedOn; },
			set: function(value) { _options.modifiedOn = value; }
		});
		Object.defineProperty(this, 'verifiedBy', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.verifiedBy; },
			set: function(value) { _options.verifiedBy = value; }
		});
		Object.defineProperty(this, 'verifiedOn', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.verifiedOn; },
			set: function(value) { _options.verifiedOn = value; }
		});
		Object.defineProperty(this, 'isRxContinueLastAdministrationCompleted', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isRxContinueLastAdministrationCompleted; },
			set: function(value) { _options.isRxContinueLastAdministrationCompleted = value; }
		});
		Object.defineProperty(this, 'medicationLocation', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.medicationLocation; },
			set: function(value) { _options.medicationLocation = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		Object.defineProperty(this, 'dosageTypeCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageTypeCode; },
			set: function(value) { _options.dosageTypeCode = value; }
		});
		Object.defineProperty(this, 'dosageTypeDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dosageTypeDescription; },
			set: function(value) { _options.dosageTypeDescription = value; }
		});
		Object.defineProperty(this, 'routeCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.routeCode; },
			set: function(value) { _options.routeCode = value; }
		});
		Object.defineProperty(this, 'routeDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.routeDescription; },
			set: function(value) { _options.routeDescription = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.scheduleDto = function(options) {
		var _options = {
			startTimestamp: null,
			stopTimestamp: null,
			schedulePriorityId: null,
			conditions: "",
			frequencyTemplateId: null,
			pharmacyFrequencyCodification: "",
			isUnknownFrequencyTemplate: false,
			isManualTemplateEntry: false,
			frequencyData: null,
			dose: new Lgi.Emr.Mar.Dto.doseDto(),
			pharmacyAdministrationTimes: [],
			emarAdministrationTimes: [],
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'startTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.startTimestamp; },
			set: function(value) { _options.startTimestamp = value; }
		});
		Object.defineProperty(this, 'stopTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.stopTimestamp; },
			set: function(value) { _options.stopTimestamp = value; }
		});
		Object.defineProperty(this, 'schedulePriorityId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.schedulePriorityId; },
			set: function(value) { _options.schedulePriorityId = value; }
		});
		Object.defineProperty(this, 'conditions', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.conditions; },
			set: function(value) { _options.conditions = value; }
		});
		Object.defineProperty(this, 'frequencyTemplateId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.frequencyTemplateId; },
			set: function(value) { _options.frequencyTemplateId = value; }
		});
		Object.defineProperty(this, 'pharmacyFrequencyCodification', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.pharmacyFrequencyCodification; },
			set: function(value) { _options.pharmacyFrequencyCodification = value; }
		});
		Object.defineProperty(this, 'isUnknownFrequencyTemplate', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isUnknownFrequencyTemplate; },
			set: function(value) { _options.isUnknownFrequencyTemplate = value; }
		});
		Object.defineProperty(this, 'isManualTemplateEntry', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isManualTemplateEntry; },
			set: function(value) { _options.isManualTemplateEntry = value; }
		});
		Object.defineProperty(this, 'frequencyData', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.frequencyData; },
			set: function(value) { _options.frequencyData = value; }
		});
		Object.defineProperty(this, 'dose', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dose; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.dose = new Lgi.Emr.Mar.Dto.doseDto(value);
				else
					_options.dose = null; }
		});
		Object.defineProperty(this, 'pharmacyAdministrationTimes', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.pharmacyAdministrationTimes; },
			set: function(value) { _options.pharmacyAdministrationTimes = value; }
		});
		Object.defineProperty(this, 'emarAdministrationTimes', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.emarAdministrationTimes; },
			set: function(value) { _options.emarAdministrationTimes = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.SchedulePriorityEnum = {
		Regular: 0,
		Stat: 1,
		Prn: 2,
	};
	ns.suspensionsDto = function(options) {
		var _options = {
			rxIds: [],
			suspensionDto: new Lgi.Emr.Mar.Dto.suspensionDto(),
			isExcludeMarkInError: false
		}
		Object.defineProperty(this, 'rxIds', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rxIds; },
			set: function(value) { _options.rxIds = value; }
		});
		Object.defineProperty(this, 'suspensionDto', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.suspensionDto; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.suspensionDto = new Lgi.Emr.Mar.Dto.suspensionDto(value);
				else
					_options.suspensionDto = null; }
		});
		Object.defineProperty(this, 'isExcludeMarkInError', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isExcludeMarkInError; },
			set: function(value) { _options.isExcludeMarkInError = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.workflowMetaInfoDto = function(options) {
		var _options = {
			id: 0,
			isInUse: false
		}
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		Object.defineProperty(this, 'isInUse', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isInUse; },
			set: function(value) { _options.isInUse = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.suspensionDto = function(options) {
		var _options = {
			isMarSuspension: false,
			startTimestamp: null,
			stopTimestamp: null,
			suspensionReasonId: null,
			suspensionNote: "",
			endSuspensionReasonId: null,
			endSuspensionNote: "",
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'isMarSuspension', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isMarSuspension; },
			set: function(value) { _options.isMarSuspension = value; }
		});
		Object.defineProperty(this, 'startTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.startTimestamp; },
			set: function(value) { _options.startTimestamp = value; }
		});
		Object.defineProperty(this, 'stopTimestamp', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.stopTimestamp; },
			set: function(value) { _options.stopTimestamp = value; }
		});
		Object.defineProperty(this, 'suspensionReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.suspensionReasonId; },
			set: function(value) { _options.suspensionReasonId = value; }
		});
		Object.defineProperty(this, 'suspensionNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.suspensionNote; },
			set: function(value) { _options.suspensionNote = value; }
		});
		Object.defineProperty(this, 'endSuspensionReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.endSuspensionReasonId; },
			set: function(value) { _options.endSuspensionReasonId = value; }
		});
		Object.defineProperty(this, 'endSuspensionNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.endSuspensionNote; },
			set: function(value) { _options.endSuspensionNote = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.vitalSignsExtDto = function(options) {
		var _options = {
			typeCode: "",
			typeDescription: "",
			value: "",
			date: "",
			unitCode: "",
			unitDescription: ""
		}
		Object.defineProperty(this, 'typeCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.typeCode; },
			set: function(value) { _options.typeCode = value; }
		});
		Object.defineProperty(this, 'typeDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.typeDescription; },
			set: function(value) { _options.typeDescription = value; }
		});
		Object.defineProperty(this, 'value', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.value; },
			set: function(value) { _options.value = value; }
		});
		Object.defineProperty(this, 'date', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.date; },
			set: function(value) { _options.date = value; }
		});
		Object.defineProperty(this, 'unitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.unitCode; },
			set: function(value) { _options.unitCode = value; }
		});
		Object.defineProperty(this, 'unitDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.unitDescription; },
			set: function(value) { _options.unitDescription = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.visitExtDto = function(options) {
		var _options = {
			visitID: "",
			sourceOfThisInformation: "",
			applicationIDSource: "",
			installationIDSource: "",
			careUnit: "",
			patientClass: "",
			visitStartDtm: "",
			visitEndDtm: ""
		}
		Object.defineProperty(this, 'visitID', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.visitID; },
			set: function(value) { _options.visitID = value; }
		});
		Object.defineProperty(this, 'sourceOfThisInformation', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sourceOfThisInformation; },
			set: function(value) { _options.sourceOfThisInformation = value; }
		});
		Object.defineProperty(this, 'applicationIDSource', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.applicationIDSource; },
			set: function(value) { _options.applicationIDSource = value; }
		});
		Object.defineProperty(this, 'installationIDSource', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.installationIDSource; },
			set: function(value) { _options.installationIDSource = value; }
		});
		Object.defineProperty(this, 'careUnit', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.careUnit; },
			set: function(value) { _options.careUnit = value; }
		});
		Object.defineProperty(this, 'patientClass', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.patientClass; },
			set: function(value) { _options.patientClass = value; }
		});
		Object.defineProperty(this, 'visitStartDtm', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.visitStartDtm; },
			set: function(value) { _options.visitStartDtm = value; }
		});
		Object.defineProperty(this, 'visitEndDtm', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.visitEndDtm; },
			set: function(value) { _options.visitEndDtm = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.visitDto = function(options) {
		var _options = {
			visitId: "",
			installationId: "",
			applicationId: "",
			mrn: new Lgi.Emr.Mar.Dto.mrnDto(),
			careUnitCode: "",
			administrationNote: "",
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'visitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.visitId; },
			set: function(value) { _options.visitId = value; }
		});
		Object.defineProperty(this, 'installationId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.installationId; },
			set: function(value) { _options.installationId = value; }
		});
		Object.defineProperty(this, 'applicationId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.applicationId; },
			set: function(value) { _options.applicationId = value; }
		});
		Object.defineProperty(this, 'mrn', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mrn; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.mrn = new Lgi.Emr.Mar.Dto.mrnDto(value);
				else
					_options.mrn = null; }
		});
		Object.defineProperty(this, 'careUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.careUnitCode; },
			set: function(value) { _options.careUnitCode = value; }
		});
		Object.defineProperty(this, 'administrationNote', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.administrationNote; },
			set: function(value) { _options.administrationNote = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.workflowInstanceDto = function(options) {
		var _options = {
			workflowId: null,
			isCancelled: false,
			cancellationReasonId: null,
			startDateTime: null,
			observations: [],
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'workflowId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.workflowId; },
			set: function(value) { _options.workflowId = value; }
		});
		Object.defineProperty(this, 'isCancelled', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isCancelled; },
			set: function(value) { _options.isCancelled = value; }
		});
		Object.defineProperty(this, 'cancellationReasonId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.cancellationReasonId; },
			set: function(value) { _options.cancellationReasonId = value; }
		});
		Object.defineProperty(this, 'startDateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.startDateTime; },
			set: function(value) { _options.startDateTime = value; }
		});
		Object.defineProperty(this, 'observations', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.observations; },
			set: function(value) { _options.observations = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.doseDto = function(options) {
		var _options = {
			giveDoseMin: null,
			giveDoseMax: null,
			strengthUnitId: null,
			giveAmountMin: null,
			giveAmountMax: null,
			amountUnitId: null,
			receivedGiveAmountMin: null,
			receivedGiveAmountMax: null,
			receivedAmountUnitId: null,
			rate: null,
			rateUnitId: null,
			volume: null,
			volumeUnitId: null,
			receivedValues: [],
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'giveDoseMin', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.giveDoseMin; },
			set: function(value) { _options.giveDoseMin = value; }
		});
		Object.defineProperty(this, 'giveDoseMax', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.giveDoseMax; },
			set: function(value) { _options.giveDoseMax = value; }
		});
		Object.defineProperty(this, 'strengthUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.strengthUnitId; },
			set: function(value) { _options.strengthUnitId = value; }
		});
		Object.defineProperty(this, 'giveAmountMin', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.giveAmountMin; },
			set: function(value) { _options.giveAmountMin = value; }
		});
		Object.defineProperty(this, 'giveAmountMax', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.giveAmountMax; },
			set: function(value) { _options.giveAmountMax = value; }
		});
		Object.defineProperty(this, 'amountUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.amountUnitId; },
			set: function(value) { _options.amountUnitId = value; }
		});
		Object.defineProperty(this, 'receivedGiveAmountMin', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receivedGiveAmountMin; },
			set: function(value) { _options.receivedGiveAmountMin = value; }
		});
		Object.defineProperty(this, 'receivedGiveAmountMax', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receivedGiveAmountMax; },
			set: function(value) { _options.receivedGiveAmountMax = value; }
		});
		Object.defineProperty(this, 'receivedAmountUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receivedAmountUnitId; },
			set: function(value) { _options.receivedAmountUnitId = value; }
		});
		Object.defineProperty(this, 'rate', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rate; },
			set: function(value) { _options.rate = value; }
		});
		Object.defineProperty(this, 'rateUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rateUnitId; },
			set: function(value) { _options.rateUnitId = value; }
		});
		Object.defineProperty(this, 'volume', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.volume; },
			set: function(value) { _options.volume = value; }
		});
		Object.defineProperty(this, 'volumeUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.volumeUnitId; },
			set: function(value) { _options.volumeUnitId = value; }
		});
		Object.defineProperty(this, 'receivedValues', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receivedValues; },
			set: function(value) { _options.receivedValues = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.FrequencyTypeEnum = {
		Days: 0,
		Hours: 1,
		Minutes: 2,
		Weeks: 3,
		Intervals: 4,
		ListDaysOfMonth: 5,
		DoseOnly: 6,
		ListOfTimestamps: 7,
	};
	ns.periodicityDto = function(options) {
		var _options = {
			Every: 0,
			TimeUnitCode: ""
		}
		Object.defineProperty(this, 'Every', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.Every; },
			set: function(value) { _options.Every = value; }
		});
		Object.defineProperty(this, 'TimeUnitCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.TimeUnitCode; },
			set: function(value) { _options.TimeUnitCode = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.rxEventDto = function(options) {
		var _options = {
			event: new Lgi.Emr.Mar.Dto.eventDto(),
			rx: new Lgi.Emr.Mar.Dto.rxDto()
		}
		Object.defineProperty(this, 'event', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.event; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.event = new Lgi.Emr.Mar.Dto.eventDto(value);
				else
					_options.event = null; }
		});
		Object.defineProperty(this, 'rx', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.rx; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.rx = new Lgi.Emr.Mar.Dto.rxDto(value);
				else
					_options.rx = null; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.signatureDto = function(options) {
		var _options = {
			userId: 0,
			userName: "",
			title: "",
			dateTime: new Date()
		}
		Object.defineProperty(this, 'userId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.userId; },
			set: function(value) { _options.userId = value; }
		});
		Object.defineProperty(this, 'userName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.userName; },
			set: function(value) { _options.userName = value; }
		});
		Object.defineProperty(this, 'title', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.title; },
			set: function(value) { _options.title = value; }
		});
		Object.defineProperty(this, 'dateTime', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dateTime; },
			set: function(value) { _options.dateTime = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.mxDto = function(options) {
		var _options = {
			pharmacyMxCode: "",
			sourcePharmacyId: "",
			description: "",
			pharmacyDescription: "",
			genericCode: "",
			strength: null,
			strengthUnitId: null,
			isNotInCatalog: false,
			dinCode: "",
			commercialName: "",
			formId: null,
			advisorIdentifier: "",
			monographNumber: "",
			mxClassIds: [],
			receivedValues: [],
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'pharmacyMxCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.pharmacyMxCode; },
			set: function(value) { _options.pharmacyMxCode = value; }
		});
		Object.defineProperty(this, 'sourcePharmacyId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.sourcePharmacyId; },
			set: function(value) { _options.sourcePharmacyId = value; }
		});
		Object.defineProperty(this, 'description', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.description; },
			set: function(value) { _options.description = value; }
		});
		Object.defineProperty(this, 'pharmacyDescription', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.pharmacyDescription; },
			set: function(value) { _options.pharmacyDescription = value; }
		});
		Object.defineProperty(this, 'genericCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.genericCode; },
			set: function(value) { _options.genericCode = value; }
		});
		Object.defineProperty(this, 'strength', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.strength; },
			set: function(value) { _options.strength = value; }
		});
		Object.defineProperty(this, 'strengthUnitId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.strengthUnitId; },
			set: function(value) { _options.strengthUnitId = value; }
		});
		Object.defineProperty(this, 'isNotInCatalog', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.isNotInCatalog; },
			set: function(value) { _options.isNotInCatalog = value; }
		});
		Object.defineProperty(this, 'dinCode', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.dinCode; },
			set: function(value) { _options.dinCode = value; }
		});
		Object.defineProperty(this, 'commercialName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.commercialName; },
			set: function(value) { _options.commercialName = value; }
		});
		Object.defineProperty(this, 'formId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.formId; },
			set: function(value) { _options.formId = value; }
		});
		Object.defineProperty(this, 'advisorIdentifier', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.advisorIdentifier; },
			set: function(value) { _options.advisorIdentifier = value; }
		});
		Object.defineProperty(this, 'monographNumber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.monographNumber; },
			set: function(value) { _options.monographNumber = value; }
		});
		Object.defineProperty(this, 'mxClassIds', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mxClassIds; },
			set: function(value) { _options.mxClassIds = value; }
		});
		Object.defineProperty(this, 'receivedValues', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.receivedValues; },
			set: function(value) { _options.receivedValues = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.mdDto = function(options) {
		var _options = {
			licenceNumber: "",
			firstName: "",
			lastName: "",
			fullName: "",
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'licenceNumber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.licenceNumber; },
			set: function(value) { _options.licenceNumber = value; }
		});
		Object.defineProperty(this, 'firstName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.firstName; },
			set: function(value) { _options.firstName = value; }
		});
		Object.defineProperty(this, 'lastName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.lastName; },
			set: function(value) { _options.lastName = value; }
		});
		Object.defineProperty(this, 'fullName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.fullName; },
			set: function(value) { _options.fullName = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.prescriptionDto = function(options) {
		var _options = {
			orderNumber: "",
			orderSource: "",
			md: new Lgi.Emr.Mar.Dto.mdDto(),
			prescriber: "",
			version: 0,
			id: 0
		}
		Object.defineProperty(this, 'orderNumber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.orderNumber; },
			set: function(value) { _options.orderNumber = value; }
		});
		Object.defineProperty(this, 'orderSource', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.orderSource; },
			set: function(value) { _options.orderSource = value; }
		});
		Object.defineProperty(this, 'md', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.md; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.md = new Lgi.Emr.Mar.Dto.mdDto(value);
				else
					_options.md = null; }
		});
		Object.defineProperty(this, 'prescriber', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.prescriber; },
			set: function(value) { _options.prescriber = value; }
		});
		Object.defineProperty(this, 'version', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.version; },
			set: function(value) { _options.version = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.userDto = function(options) {
		var _options = {
			username: "",
			lastName: "",
			firstName: "",
			oacisUserId: null,
			professionalTitle: "",
			id: 0
		}
		Object.defineProperty(this, 'username', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.username; },
			set: function(value) { _options.username = value; }
		});
		Object.defineProperty(this, 'lastName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.lastName; },
			set: function(value) { _options.lastName = value; }
		});
		Object.defineProperty(this, 'firstName', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.firstName; },
			set: function(value) { _options.firstName = value; }
		});
		Object.defineProperty(this, 'oacisUserId', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.oacisUserId; },
			set: function(value) { _options.oacisUserId = value; }
		});
		Object.defineProperty(this, 'professionalTitle', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.professionalTitle; },
			set: function(value) { _options.professionalTitle = value; }
		});
		Object.defineProperty(this, 'id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.id; },
			set: function(value) { _options.id = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

})(Lgi.Emr.Mar.Dto);
(function(ns) {
	ns.AnalysisResult = function(options) {
		var _options = {
			alerts: [],
			errors: []
		}
		Object.defineProperty(this, 'alerts', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.alerts; },
			set: function(value) { _options.alerts = value; }
		});
		Object.defineProperty(this, 'errors', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.errors; },
			set: function(value) { _options.errors = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.MxAdditionAnalysisParam = function(options) {
		var _options = {
			patient: new Lgi.Emr.Mar.Dto.patientExtDto(),
			mx: new Lgi.Emr.Mar.Dto.mxDto()
		}
		Object.defineProperty(this, 'patient', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.patient; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.patient = new Lgi.Emr.Mar.Dto.patientExtDto(value);
				else
					_options.patient = null; }
		});
		Object.defineProperty(this, 'mx', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.mx; },
			set: function(value) { 
				if (value !== undefined && value !== null)
					_options.mx = new Lgi.Emr.Mar.Dto.mxDto(value);
				else
					_options.mx = null; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.AdvisorAlert = function(options) {
		var _options = {
			Severity: 0,
			Code: "",
			Description: "",
			DescriptionSL: ""
		}
		Object.defineProperty(this, 'Severity', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.Severity; },
			set: function(value) { _options.Severity = value; }
		});
		Object.defineProperty(this, 'Code', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.Code; },
			set: function(value) { _options.Code = value; }
		});
		Object.defineProperty(this, 'Description', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.Description; },
			set: function(value) { _options.Description = value; }
		});
		Object.defineProperty(this, 'DescriptionSL', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.DescriptionSL; },
			set: function(value) { _options.DescriptionSL = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

	ns.AdvisorMx = function(options) {
		var _options = {
			Id: "",
			Description: "",
			DescriptionSL: ""
		}
		Object.defineProperty(this, 'Id', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.Id; },
			set: function(value) { _options.Id = value; }
		});
		Object.defineProperty(this, 'Description', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.Description; },
			set: function(value) { _options.Description = value; }
		});
		Object.defineProperty(this, 'DescriptionSL', {
			enumerable: true,
			configurable: true,
			get: function() { return _options.DescriptionSL; },
			set: function(value) { _options.DescriptionSL = value; }
		});
		if(options){
			jQuery.extend(true, this, options);
		}
	};

})(Lgi.Emr.Mar.Dto.Advisor);